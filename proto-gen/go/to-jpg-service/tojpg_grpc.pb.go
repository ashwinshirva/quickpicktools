// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package to_jpg_worker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToJpgServiceClient is the client API for ToJpgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToJpgServiceClient interface {
	PngToJpg(ctx context.Context, in *PngToJpgReq, opts ...grpc.CallOption) (*PngToJpgResp, error)
}

type toJpgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToJpgServiceClient(cc grpc.ClientConnInterface) ToJpgServiceClient {
	return &toJpgServiceClient{cc}
}

func (c *toJpgServiceClient) PngToJpg(ctx context.Context, in *PngToJpgReq, opts ...grpc.CallOption) (*PngToJpgResp, error) {
	out := new(PngToJpgResp)
	err := c.cc.Invoke(ctx, "/proto.ToJpgService/PngToJpg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToJpgServiceServer is the server API for ToJpgService service.
// All implementations must embed UnimplementedToJpgServiceServer
// for forward compatibility
type ToJpgServiceServer interface {
	PngToJpg(context.Context, *PngToJpgReq) (*PngToJpgResp, error)
	mustEmbedUnimplementedToJpgServiceServer()
}

// UnimplementedToJpgServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToJpgServiceServer struct {
}

func (UnimplementedToJpgServiceServer) PngToJpg(context.Context, *PngToJpgReq) (*PngToJpgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PngToJpg not implemented")
}
func (UnimplementedToJpgServiceServer) mustEmbedUnimplementedToJpgServiceServer() {}

// UnsafeToJpgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToJpgServiceServer will
// result in compilation errors.
type UnsafeToJpgServiceServer interface {
	mustEmbedUnimplementedToJpgServiceServer()
}

func RegisterToJpgServiceServer(s grpc.ServiceRegistrar, srv ToJpgServiceServer) {
	s.RegisterService(&ToJpgService_ServiceDesc, srv)
}

func _ToJpgService_PngToJpg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PngToJpgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToJpgServiceServer).PngToJpg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ToJpgService/PngToJpg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToJpgServiceServer).PngToJpg(ctx, req.(*PngToJpgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ToJpgService_ServiceDesc is the grpc.ServiceDesc for ToJpgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToJpgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ToJpgService",
	HandlerType: (*ToJpgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PngToJpg",
			Handler:    _ToJpgService_PngToJpg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "to-jpg-service/tojpg.proto",
}
